from PyQt4 import QtGui, QtCore
from aqt import mw
from anki.hooks import addHook, wrap
from aqt.qt import *
from aqt.addcards import AddCards

READING_FIELD = 'Reading'
KANA_FIELD = 'Kana'
NOTE_TYPE = 'japanese'

def isKanji(char):
    """Return if the given char is a kanji.
       See: https://stackoverflow.com/a/37311125"""
    return 0x4E00 <= ord(char) <= 0x9FFF

def getKana(note):
    """Returns the kana for a given note's "Reading" field, which must already
       have furigana generated by the Japanese Support plugin."""
    expr = note[READING_FIELD]
    kana = ''
    for char in expr:
        if char not in {' ', '[', ']'} and not isKanji(char):
            kana += char
    return kana

def addKana(nids):
    """Adds the kana readings for a batch of notes."""
    mw.checkpoint("Bulk-add Kana")  # For undo
    mw.progress.start()  # What is this doing?

    for nid in nids:
        note = mw.col.getNote(nid)
        if not note[KANA_FIELD]:  # Only write if the field is empty
            note[KANA_FIELD] = getKana(note)
            note.flush()

    mw.progress.finish()
    mw.reset()  # Redraw GUI

def setupBrowserMenu(browser):
    """Add a "Bulk-add Kana" button to the "Edit" menu."""
    a = QAction("Bulk-add Kana", browser)
    a.triggered.connect(lambda: addKana(browser.selectedNotes()))
    browser.form.menuEdit.addSeparator()
    browser.form.menuEdit.addAction(a)

def onAddCards(self):
    """After a new note is added, generate the kana for its "Reading" field,
       which must already have furigana generated by the Japanese Support
       plugin. (Thus, this cannot happen on tab during editing.)"""
    note = mw.col.getNote(self.history[0][0])
    if NOTE_TYPE in note.model()['name'].lower():
        note[KANA_FIELD] = getKana(note)
        note.flush()

# Hook our plugin into Anki
addHook("browser.setupMenus", setupBrowserMenu)
AddCards.addCards = wrap(AddCards.addCards, onAddCards)
